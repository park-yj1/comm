<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 요청처리 과정에 대해서 정의하는 곳 -->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 
		servlet-context.xml 파일 
		
		- DispatcherServlet(모든 요청을 받아서 Controller 찾고, 응답에 따라 View를 찾아서 연결)의 설정파일 
		
		* HandlerMapping : 요청 받은 주소와 해당 주소에 따라 처리할 컨트롤러를 연결하는 역할
		-> 기존에는 XML 방식을 사용하다 
		   @RequestMapping / @GetMapping / @PostMapping으로 대체됨
			
						   
	 -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- View Resolver : 
			- Controller에서 반환된 앞/뒤에 (prefix/suffix)를 추가하여 만들어진 경로의 jsp로 요청 위임(forward시켜줌!)  
			
			단, 반환된 문자열의 시작이 redirect : 구문이면 재요청 (redirect) 진행 
			
			/WEB-INF/views/member/signUp.jsp		

			redirect/ :바로 / 뒤에 있는 경로로 재요청이 된다.
			
						
	-->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 지정된 패키지 이하에 존재하는 
		@Component @Controller @Service @repository를 찾아서 빈으로 생성  -->
	<context:component-scan base-package="edu.kh.comm" />
	
	<!-- interceptors :인터셉터를 모아둔 태그 -->
	<interceptors>
		<!-- interceptor : 요청이 Dispatcher Servlet에서 Controller에 도달하기 전 또는 후에 
						   요청/응답 객체(req.resp)를 가로채서 사용 할 수 있는 객체
		 -->
		<interceptor>
		
			<!-- 가로챌 요청의 패턴을 지정 -->
			<mapping path="/**"/>
		
			<!-- 인터셉터 역할을 수행할 클래스를 찾아 bean으로 등록 -->
			<beans:bean id="boardTypeInterceptor" class="edu.kh.comm.common.interceptor.BoardTypeInterceptor"/>
			
			
		</interceptor>
	
	</interceptors>
	
	
	<!-- 트랜잭션 처리시 @Transactional 어노테이션 사용할 예정 
	
	@Transactional : 클래스 또는 매서드 수행 후 트랜잭션 처리를 하라고 알려주는 어노테이션 
	
	->해당 어노테이션을 인식하라는 설정이 필요함
		-> annotation-driven
	
	-->
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- aop auto proxy -->
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	
	<!--
	 proxy-target-class : 프록시가 적용될 클래스가 
	 
	 인터페이스면 false -> Spring AOP는 기본적으로 인터페이스를 상속받은 프록시가 생성되어
	 					코드를 수행함
	 					
	 일반 클래스면 true -> cglib 라이브러리를 이용해서 일반 클래스를 상속받아 프록시 생성
	 
	 
	 [스프링 요청/응답 기본 흐름]
	 
	 요청 -> Frilter -> DispatcherServlet -> interceptor ->  Controller -> AOP -> Service -> DAO
					    (HandlerMapping)							   					     | 	
							 						  							             DB
							 													             |
	 응답 <- Frilter <- DispatcherServlet<- interceptor <- Controller <-  AOP  <- Service <- DAO  
	 		              (ViewResolver)
	  
	 
	 
	 
	   -->
	   
	   
	   
	   
	
	<!-- @scheduled 어노테이션 인식을 위한 태그 -->
	 <task:annotation-driven/>
	
	<!-- websocket 요청 시 핸들러 클래스와 연결하기  -->
	
	<beans:bean id="chatHandler" class="edu.kh.comm.chat.model.websocket.ChatWebsocketHandler"/>
	
	<websocket:handlers>
	
	
	<!-- 웹소켓 요청을 처리할 bean 지정(작성하는태그) -->
	<websocket:mapping handler="chatHandler" path="/chat"/>
	
	
	<websocket:handshake-interceptors>
	<!-- 
		interceptor: Http통신에서 req,resp 가로채는 역할 
	
		handshake-interceptors : 
			요청 관련 데이터 중 HttpSession만을(로그인정보, 채팅방 번호)가로채서
			WebsocketSession 에 넣어주는 역할
	-->
		<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>	
	
	</websocket:handshake-interceptors>
	
	<!-- SockJS 라이브러리를 이용해서 만들어진 웹소켓 객체임을 인식 -->
	<websocket:sockjs/>
	
	</websocket:handlers>
	
	
	
	
	
	
	
	
	
	
	
	
	
</beans:beans>
